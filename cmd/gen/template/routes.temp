package {group_name}

import (
    "github.com/gin-gonic/gin"
    "go.uber.org/fx"
)

type {origin_service_name}Dep struct {
    fx.In
    Srv {group_name}.{service_name}Service
}

func {service_name}Routes(t {origin_service_name}Dep, r *types.{module_name}Router) {
    api := r.Group("/{group_name}/{origin_service_name}")
    api.GET("/all", t.all)
    api.POST("/list", t.list)
    api.GET("/detail", t.detail)
    api.POST("/add", t.add)
    api.POST("/edit", t.edit)
    api.POST("/delete", t.delete)
}

func (t {origin_service_name}Dep) all(c *gin.Context) {
    var listReq req.{service_name}QueryReq
    if response.IsFailWithResp(c, util.VerifyUtil.Verify(c, &listReq)) {
    		return
    }
    res, err := t.Srv.All(listReq, req.GetAuth(c))
    response.CheckAndRespWithData(c, res, err)
}

func (t {origin_service_name}Dep) list(c *gin.Context) {
    var page req.PageReq
    var listReq req.{service_name}QueryReq
    if response.IsFailWithResp(c, util.VerifyUtil.Verify(c, &page, &listReq)) {
    		return
    }
    res, err := t.Srv.List(page, listReq, req.GetAuth(c))
    response.CheckAndRespWithData(c, res, err)
}

func (t {origin_service_name}Dep) detail(c *gin.Context) {
    var idReq req.IdReq
    if response.IsFailWithResp(c, util.VerifyUtil.Verify(c, &idReq)) {
    		return
    }
    res, err := t.Srv.Detail(idReq.ID)
    response.CheckAndRespWithData(c, res, err)
}

func (t {origin_service_name}Dep) add(c *gin.Context) {
    var addReq req.{service_name}AddReq
    if response.IsFailWithResp(c, util.VerifyUtil.Verify(c, &addReq)) {
    		return
    }
    err := t.Srv.Add(addReq, req.GetAuth(c))
    response.CheckAndResp(c, err)
}

func (t {origin_service_name}Dep) edit(c *gin.Context) {
    var editReq req.{service_name}EditReq
    if response.IsFailWithResp(c, util.VerifyUtil.Verify(c, &editReq)) {
    		return
    }
    err := t.Srv.Edit(editReq, req.GetAuth(c))
    response.CheckAndResp(c, err)
}

func (t {origin_service_name}Dep) delete(c *gin.Context) {
    var idReq req.IdReq
    if response.IsFailWithResp(c, util.VerifyUtil.Verify(c, &idReq)) {
    		return
    }
    err := t.Srv.Del(idReq.ID, req.GetAuth(c))
    response.CheckAndResp(c, err)
}